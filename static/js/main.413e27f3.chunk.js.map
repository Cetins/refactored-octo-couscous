{"version":3,"sources":["components/About.js","components/Home.js","components/Pricing.js","components/NavBar.js","components/ErrorPage.js","components/Choice.js","App.js","registerServiceWorker.js","index.js"],"names":["About","Home","Pricing","listItems","prices","map","price","index","level","cost","NavBar","to","ErrorPage","Choice","wildcard","useParams","App","useState","pricing","path","element","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"sOASeA,EAPD,kBACZ,gCACE,uCACA,+DCIWC,EAPF,kBACX,gCACE,sCACA,oECaWC,EAhBC,SAAC,GAAc,IAEvBC,EAFsB,EAAZC,OAESC,KAAI,SAACC,EAAOC,GACnC,OAAO,mCAAkBD,EAAME,MAAxB,SAAkCF,EAAMG,KAAxC,MAASF,MAElB,OACE,gCACE,yCACA,6BACGJ,QCSMO,EAjBA,WAEb,OACE,+BACE,6BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,oBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,SAAT,qBAEF,6BACE,cAAC,IAAD,CAAMA,GAAG,WAAT,2BCLOC,EAPG,WAEhB,OACE,uDCUWC,EAZA,WAEb,IAAOC,EAAYC,cAAZD,SAEP,OACE,qCACE,wCACA,gDAAmBA,SC4BVE,EA7BH,WAEV,MAA8BC,mBAAS,CACrC,CAACT,MAAO,QAASC,KAAM,GACvB,CAACD,MAAO,UAAWC,KAAM,IACzB,CAACD,MAAO,aAAcC,KAAM,OAH9B,mBAAOS,EAAP,UAMA,OACE,eAAC,IAAD,WACE,cAAC,EAAD,IACA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAE,EAAF,MACzB,cAAC,IAAD,CAAOD,KAAK,SAASC,QAAS,cAAE,EAAF,MAC9B,cAAC,IAAD,CACED,KAAK,WACLC,QAAS,cAAE,EAAF,CAAUhB,OAAQc,MAE7B,cAAC,IAAD,CACEC,KAAK,qBACLC,QAAS,cAAC,EAAD,MAEX,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,cAAC,EAAD,aCrB3BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MChEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDclC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,4BAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,4BAAN,sBAEN5B,EAwCX,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAAAqB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C5B,UAAUC,cAAc4B,MAAM1B,MAAK,SAAAC,GACjCA,EAAa0B,aAAa3B,MAAK,WAC7BT,OAAOC,SAASoC,eAKpBjC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEAzDAoB,CAAwBjC,GAHxBD,EAAgBC,OC7BxBkC,K","file":"static/js/main.413e27f3.chunk.js","sourcesContent":["import React from \"react\";\n\nconst About = () => (\n  <div>\n    <h4>About</h4>\n    <p>Some information about us.</p>\n  </div>\n);\n\nexport default About;\n","import React from \"react\";\n\nconst Home = () => (\n  <div>\n    <h4>Home</h4>\n    <p>Welcome to our magical homepage</p>\n  </div>\n);\n\nexport default Home;\n","import React from \"react\";\n\nconst Pricing = ({prices}) => {\n  \n  const listItems = prices.map((price, index) => {\n    return <li key={index}> {price.level}: Â£{price.cost} </li>\n  })\n  return (\n    <div>\n      <h4>Pricing</h4>\n      <ul>\n        {listItems}\n      </ul>\n    </div>\n  )\n};\n\n\nexport default Pricing;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n\n  return(\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/about\">About</Link>\n      </li>\n      <li>\n        <Link to=\"/pricing\">Pricing</Link>\n      </li>\n    </ul>\n  )\n}\n\nexport default NavBar;","import React from \"react\";\n\nconst ErrorPage = () => {\n\n  return (\n    <h1>404 - Page not found</h1>\n  )\n}\n\nexport default ErrorPage;","import React from \"react\";\nimport {useParams} from \"react-router-dom\"\n\nconst Choice = () => {\n\n  const {wildcard} = useParams()\n\n  return(\n    <>\n      <h1>Choice</h1>\n      <p>You're on page {wildcard}</p> \n    </>\n  )\n}\n\nexport default Choice;","import React, {useState} from 'react';\nimport { HashRouter as Router, Routes, Route } from 'react-router-dom';\nimport About from \"./components/About\";\nimport Home from \"./components/Home\";\nimport Pricing from \"./components/Pricing\";\nimport NavBar from \"./components/NavBar\";\nimport ErrorPage from './components/ErrorPage';\nimport Choice from './components/Choice';\n\nconst App = ()=> {\n\n  const [pricing, setPricing] = useState([\n    {level: \"Hobby\", cost: 0},\n    {level: \"Startup\", cost: 10},\n    {level: \"Enterprise\", cost: 100}\n  ])\n  \n  return (\n    <Router>\n      <NavBar/>\n      <Routes>\n        <Route path=\"/\" element={< Home />} />\n        <Route path=\"/about\" element={< About />}/>\n        <Route \n          path=\"/pricing\" \n          element={< Pricing prices={pricing} />} \n        />\n        <Route \n          path=\"/choices/:wildcard\" \n          element={<Choice />}\n        />\n        <Route path=\"*\" element={<ErrorPage />} />\n      </Routes>\n    </Router>\n  )\n\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}